generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id                     String         @id @default(cuid())
  clerkId                String?        @unique
  name                   String?
  email                  String         @unique
  emailVerified          DateTime?
  image                  String?
  firstName              String?
  lastName               String?
  phone                  String?
  isAdmin                Boolean        @default(false)
  password               String?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  resetToken             String?
  resetTokenExpiry       DateTime?
  emailVerificationToken String?
  accounts               Account[]
  addresses              Address[]
  adminAuditLogs         AdminAuditLog[]
  blogPosts              BlogPost[]
  orders                 Order[]
  reviews                Review[]
  sessions               Session[]
  wishlist               WishlistItem[]

  @@map("users")
}

model Product {
  id             String              @id @default(cuid())
  name           String
  slug           String              @unique
  description    String
  price          Float
  compareAtPrice Float?
  category       String
  tags           String[]
  inStock        Boolean             @default(true)
  inventory      Int                 @default(0)
  weight         Float?
  dimensions     Json?
  avgRating      Float               @default(0)
  reviewCount    Int                 @default(0)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  orderItems     OrderItem[]
  collections    ProductCollection[]
  images         ProductImage[]
  variants       ProductVariant[]
  reviews        Review[]
  wishlist       WishlistItem[]

  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  src       String
  alt       String
  position  Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id              String  @id @default(cuid())
  productId       String
  name            String
  value           String
  priceAdjustment Float   @default(0)
  inStock         Boolean @default(true)
  inventory       Int     @default(0)
  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model Collection {
  id          String              @id @default(cuid())
  name        String
  slug        String              @unique
  description String?
  image       String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  products    ProductCollection[]

  @@map("collections")
}

model ProductCollection {
  productId    String
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, collectionId])
  @@map("product_collections")
}

model Order {
  id                String          @id @default(cuid())
  orderNumber       String          @unique
  userId            String?
  email             String
  financialStatus   String          @default("pending")
  fulfillmentStatus String          @default("unfulfilled")
  subtotal          Float
  taxes             Float           @default(0)
  shipping          Float           @default(0)
  discount          Float           @default(0)
  totalPrice        Float
  currency          String          @default("INR")
  paymentMethod     String?
  paymentId         String?
  couponCode        String?
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  shippingAddressId String?
  billingAddressId  String?
  items             OrderItem[]
  billingAddress    Address?        @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress   Address?        @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  user              User?           @relation(fields: [userId], references: [id])
  returnRequests    ReturnRequest[]

  @@map("orders")
}

model OrderItem {
  id                 String              @id @default(cuid())
  orderId            String
  productId          String
  quantity           Int
  price              Float
  variants           Json?
  order              Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product            Product             @relation(fields: [productId], references: [id])
  returnRequestItems ReturnRequestItem[]

  @@map("order_items")
}

model Address {
  id             String  @id @default(cuid())
  userId         String?
  firstName      String
  lastName       String
  company        String?
  address1       String
  address2       String?
  city           String
  state          String
  zipCode        String
  country        String  @default("India")
  phone          String?
  isDefault      Boolean @default(false)
  user           User?   @relation(fields: [userId], references: [id])
  billingOrders  Order[] @relation("OrderBillingAddress")
  shippingOrders Order[] @relation("OrderShippingAddress")

  @@map("addresses")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String?
  userName  String
  rating    Int
  title     String
  comment   String
  helpful   Int      @default(0)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Coupon {
  id          String   @id @default(cuid())
  code        String   @unique
  type        String
  value       Float
  minAmount   Float?
  maxDiscount Float?
  usageLimit  Int?
  usageCount  Int      @default(0)
  isActive    Boolean  @default(true)
  validFrom   DateTime
  validTo     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("coupons")
}

model BlogPost {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  excerpt     String?
  content     String
  coverImage  String?
  tags        String[]
  published   Boolean   @default(false)
  publishedAt DateTime?
  authorId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User?     @relation(fields: [authorId], references: [id])

  @@map("blog_posts")
}

model ReturnRequest {
  id        String              @id @default(cuid())
  orderId   String
  reason    String
  status    String              @default("pending")
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  items     ReturnRequestItem[]
  order     Order               @relation(fields: [orderId], references: [id])

  @@map("return_requests")
}

model ReturnRequestItem {
  id              String        @id @default(cuid())
  returnRequestId String
  orderItemId     String
  quantity        Int
  orderItem       OrderItem     @relation(fields: [orderItemId], references: [id])
  returnRequest   ReturnRequest @relation(fields: [returnRequestId], references: [id], onDelete: Cascade)

  @@map("return_request_items")
}

model NewsletterSubscriber {
  id            String   @id @default(cuid())
  email         String   @unique
  firstName     String?
  lastName      String?
  isActive      Boolean  @default(true)
  preferences   Json?    // Store subscription preferences like categories, frequency
  source        String?  // Track where they subscribed from
  subscribedAt  DateTime @default(now())
  unsubscribedAt DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("newsletter_subscribers")
}

model Newsletter {
  id          String   @id @default(cuid())
  subject     String
  content     String   // HTML content
  plainText   String?  // Plain text version
  status      String   @default("draft") // draft, scheduled, sent
  scheduledAt DateTime?
  sentAt      DateTime?
  sentCount   Int      @default(0)
  openCount   Int      @default(0)
  clickCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("newsletters")
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   // Template name for identification
  description String?  // Optional description
  category    String   @default("general") // newsletter, promotional, transactional, etc.
  subject     String?  // Default subject line
  htmlContent String   // HTML template content
  textContent String?  // Plain text version
  variables   Json?    // Template variables/placeholders
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false) // Mark as default template for category
  thumbnail   String?  // Preview image URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_templates")
}

model AdminAuditLog {
  id         String   @id @default(cuid())
  adminId    String
  adminEmail String
  action     String   // Action performed (e.g., CREATE_PRODUCT, DELETE_USER)
  resource   String   // Resource type (e.g., product, user, order)
  resourceId String?  // ID of the affected resource
  details    Json?    // Additional details about the action
  ipAddress  String?  // IP address of the admin
  userAgent  String?  // User agent string
  timestamp  DateTime @default(now())
  
  // Relation to User model
  admin      User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  
  @@index([adminId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@map("admin_audit_logs")
}

model ErrorLog {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())
  type        String   // Error type (VALIDATION_ERROR, AUTHENTICATION_ERROR, etc.)
  message     String   // Error message
  statusCode  Int      // HTTP status code
  stack       String?  // Stack trace
  details     String?  // Additional error details as JSON string
  userId      String?  // User ID if available
  requestId   String?  // Request ID for tracing
  userAgent   String?  // User agent string
  ip          String?  // IP address
  url         String?  // Request URL
  method      String?  // HTTP method
  createdAt   DateTime @default(now())
  
  @@index([type])
  @@index([statusCode])
  @@index([timestamp])
  @@index([userId])
  @@map("error_logs")
}
